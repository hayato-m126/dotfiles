# Collection of Recommended Settings

#
# Hash known_hosts (keep default yes)
#
# Explanation: When accepting a connection to a host, it is recorded in known_hosts,
#              but the communication destination is hashed to hide it
#
# Risk: If not set to yes, if ~/ssh directory is leaked, known_hosts could be used
#       to gain access (easier to find attack targets than searching .bash_history)
#
HashKnownHosts yes

#
# Required: Do not connect using password authentication
#
# Explanation: Even if password authentication is enabled on the server side,
#             explicitly prohibit password authentication connections on the client side
#
# Risk: If yes, there's a possibility of password leakage when accidentally connecting to the wrong server
#
PasswordAuthentication no

#
# Always check host keys
#
# Explanation: Reject connection if host key is not registered in known_hosts.
#              Register in advance with ssh-keyscan -H github.com >> ~/.ssh/known_hosts,
#              or temporarily disable with ssh -o StrictHostKeyChecking=no if in a trusted network
#              When frequently creating/destroying VMs, there's overhead in registering host keys[1]
#
# Risk: If no, even when connecting to an unintended server (e.g., due to DNS spoofing),
#       it might accept without properly checking the fingerprint
#
# Considering [1]'s disadvantage, when trusting only LAN, it's better to disable checking
# only for specific IP ranges as follows:
#
# Host 192.168.1.*
#    StrictHostKeyChecking no
#
StrictHostKeyChecking yes

#
# Check not only host keys but also IPs in known_hosts
#
# Explanation: Independent of StrictHostKeyChecking. Effective as DNS spoofing countermeasure
#
# Risk:
#
CheckHostIP yes

#
# Enable compression to save bandwidth
#
# Explanation: Effective if there are many text commits in git. Not suitable for cases with many binary commits
#
# Risk:
#
Compression yes

#
# Prevent automatic disconnection from server
#
# Explanation: Prevents connection from being dropped when there's no communication for a while
#
# Risk:
#
ServerAliveInterval 60
